#!/bin/bash

# Databricks Secrets Access HTML Report Generator
# Usage: ./databricks-secrets-html-generator.sh [profile] (default: dit)

PROFILE=${1:-dit}
HTML_FILE="databricks-secrets-report.html"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

print_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
print_error() { echo -e "${RED}‚ùå $1${NC}"; }
print_info() { echo -e "${BLUE}[INFO]${NC} $1"; }

# Check if profile exists
check_profile() {
    if ! databricks auth env --profile "$PROFILE" &>/dev/null; then
        print_error "Profile '$PROFILE' not found or not authenticated"
        exit 1
    fi
}

# Generate HTML report
generate_html_report() {
    print_info "Generating interactive HTML report..."
    
    # Get current user info and workspace details
    USER_EMAIL=$(databricks current-user me --profile "$PROFILE" --output json 2>/dev/null | jq -r '.userName')
    WORKSPACE_URL=$(databricks auth env --profile "$PROFILE" 2>/dev/null | grep DATABRICKS_HOST | cut -d'=' -f2)
    
    # Extract workspace name from URL for better display
    WORKSPACE_NAME=$(echo "$WORKSPACE_URL" | sed 's|https://||' | sed 's|\.cloud\.databricks\.com.*||')
    
    # Start HTML file
    cat > "$HTML_FILE" << 'EOF'
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Databricks Secrets Access Report</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }
        .header h1 {
            margin: 0;
            font-size: 2.5em;
        }
        .header p {
            margin: 10px 0 0 0;
            opacity: 0.9;
        }
        .controls {
            padding: 20px;
            background: #f8f9fa;
            border-bottom: 1px solid #dee2e6;
        }
        .filter-group {
            display: flex;
            gap: 15px;
            align-items: center;
            flex-wrap: wrap;
        }
        .filter-btn {
            padding: 8px 16px;
            border: 2px solid #007bff;
            background: white;
            color: #007bff;
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s;
        }
        .filter-btn.active {
            background: #007bff;
            color: white;
        }
        .filter-btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 2px 5px rgba(0,123,255,0.3);
        }
        .stats {
            display: flex;
            gap: 20px;
            margin-left: auto;
        }
        .stat {
            text-align: center;
            padding: 10px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        .stat-number {
            font-size: 1.5em;
            font-weight: bold;
            color: #007bff;
        }
        .stat-label {
            font-size: 0.8em;
            color: #666;
        }
        .content {
            padding: 20px;
        }
        .scope-card {
            border: 1px solid #dee2e6;
            border-radius: 8px;
            margin-bottom: 20px;
            overflow: hidden;
            transition: all 0.3s;
        }
        .scope-card:hover {
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            transform: translateY(-2px);
        }
        .scope-header {
            padding: 15px 20px;
            background: #f8f9fa;
            border-bottom: 1px solid #dee2e6;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .scope-name {
            font-size: 1.2em;
            font-weight: bold;
            font-family: 'Monaco', 'Menlo', monospace;
        }
        .status-badge {
            padding: 4px 12px;
            border-radius: 12px;
            font-size: 0.8em;
            font-weight: bold;
        }
        .status-accessible {
            background: #d4edda;
            color: #155724;
        }
        .status-not-accessible {
            background: #f8d7da;
            color: #721c24;
        }
        .scope-body {
            padding: 20px;
        }
        .info-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }
        .info-item {
            background: #f8f9fa;
            padding: 10px;
            border-radius: 6px;
        }
        .info-label {
            font-size: 0.8em;
            color: #666;
            margin-bottom: 5px;
        }
        .info-value {
            font-weight: bold;
        }
        .secrets-list {
            margin-top: 15px;
        }
        .secret-item {
            background: #e9ecef;
            padding: 8px 12px;
            margin: 5px 0;
            border-radius: 4px;
            font-family: 'Monaco', 'Menlo', monospace;
            font-size: 0.9em;
        }
        .permission-badge {
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 0.8em;
            font-weight: bold;
        }
        .perm-manage {
            background: #d1ecf1;
            color: #0c5460;
        }
        .perm-write {
            background: #fff3cd;
            color: #856404;
        }
        .perm-read {
            background: #d4edda;
            color: #155724;
        }
        .hidden {
            display: none;
        }
        .legend {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 6px;
            margin-bottom: 20px;
        }
        .legend h3 {
            margin-top: 0;
        }
        .legend-item {
            margin: 5px 0;
            font-size: 0.9em;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üîê Databricks Secrets Access Report</h1>
EOF

    # Add header info
    cat >> "$HTML_FILE" << EOF
            <p><strong>Profile:</strong> $PROFILE | <strong>User:</strong> $USER_EMAIL</p>
            <p><strong>Workspace:</strong> $WORKSPACE_NAME</p>
            <p><strong>URL:</strong> <a href="$WORKSPACE_URL" target="_blank">$WORKSPACE_URL</a></p>
            <p><strong>Generated:</strong> $(date)</p>
EOF

    cat >> "$HTML_FILE" << 'EOF'
        </div>
        
        <div class="controls">
            <div class="filter-group">
                <button class="filter-btn active" onclick="filterScopes('all')">All Scopes</button>
                <button class="filter-btn" onclick="filterScopes('accessible')">‚úÖ Accessible Only</button>
                <button class="filter-btn" onclick="filterScopes('not-accessible')">‚ùå Not Accessible</button>
                <button class="filter-btn" onclick="filterScopes('manage')">üîß MANAGE Permission</button>
                <button class="filter-btn" onclick="filterScopes('with-secrets')">üîë Has Secrets</button>
                
                <div class="stats">
                    <div class="stat">
                        <div class="stat-number" id="total-count">0</div>
                        <div class="stat-label">Total</div>
                    </div>
                    <div class="stat">
                        <div class="stat-number" id="accessible-count">0</div>
                        <div class="stat-label">Accessible</div>
                    </div>
                    <div class="stat">
                        <div class="stat-number" id="visible-count">0</div>
                        <div class="stat-label">Visible</div>
                    </div>
                </div>
            </div>
        </div>

        <div class="content">
                <div class="legend">
                <h3>üìã About This Report</h3>
                <p><strong>Profile Context:</strong> This report shows secrets from the <code>$PROFILE</code> profile workspace only.</p>
                <p><strong>Workspace:</strong> $WORKSPACE_NAME</p>
                <h4>Permission Levels:</h4>
                <div class="legend-item"><span class="permission-badge perm-manage">MANAGE</span> Full control - read, write, delete secrets and manage ACLs</div>
                <div class="legend-item"><span class="permission-badge perm-write">WRITE</span> Can read and write secrets, but cannot manage ACLs</div>
                <div class="legend-item"><span class="permission-badge perm-read">READ</span> Can only read secrets, cannot write or manage</div>
            </div>
            
            <div id="scopes-container">
EOF

    # Get scopes and process them
    SCOPES_TEXT=$(databricks secrets list-scopes --profile "$PROFILE" 2>/dev/null)
    if [ $? -ne 0 ] || [ -z "$SCOPES_TEXT" ]; then
        echo "<p>‚ùå No secret scopes accessible</p>" >> "$HTML_FILE"
    else
        echo "$SCOPES_TEXT" | tail -n +3 | grep -v '^$' | while read -r line; do
            if [ -n "$line" ]; then
                SCOPE_NAME=$(echo "$line" | awk '{print $1}')
                BACKEND_TYPE=$(echo "$line" | awk '{print $2}')
                
                # Test accessibility
                if databricks secrets list-secrets "$SCOPE_NAME" --profile "$PROFILE" >/dev/null 2>&1; then
                    ACCESS_STATUS="accessible"
                    STATUS_CLASS="status-accessible"
                    STATUS_TEXT="‚úÖ Accessible"
                    
                    # Get secrets
                    SECRETS_LIST=$(databricks secrets list-secrets "$SCOPE_NAME" --profile "$PROFILE" 2>/dev/null)
                    SECRET_COUNT=$(echo "$SECRETS_LIST" | tail -n +3 | grep -v '^$' | wc -l | tr -d ' ')
                    
                    # Get permissions
                    ACL_INFO=$(databricks secrets list-acls "$SCOPE_NAME" --profile "$PROFILE" 2>/dev/null)
                    USER_PERMISSION=$(echo "$ACL_INFO" | jq -r ".[] | select(.principal == \"$USER_EMAIL\") | .permission" 2>/dev/null)
                    
                    if [ -z "$USER_PERMISSION" ] || [ "$USER_PERMISSION" = "null" ]; then
                        USER_PERMISSION="INHERITED"
                    fi
                    
                    # Set permission class
                    case $USER_PERMISSION in
                        "MANAGE") PERM_CLASS="perm-manage" ;;
                        "WRITE") PERM_CLASS="perm-write" ;;
                        "READ") PERM_CLASS="perm-read" ;;
                        *) PERM_CLASS="perm-read" ;;
                    esac
                    
                else
                    ACCESS_STATUS="not-accessible"
                    STATUS_CLASS="status-not-accessible"
                    STATUS_TEXT="‚ùå Not Accessible"
                    SECRET_COUNT="0"
                    USER_PERMISSION="NONE"
                    PERM_CLASS="perm-read"
                fi
                
                # Generate HTML for this scope
                cat >> "$HTML_FILE" << EOF
                <div class="scope-card" data-status="$ACCESS_STATUS" data-permission="$USER_PERMISSION" data-secret-count="$SECRET_COUNT">
                    <div class="scope-header">
                        <div class="scope-name">$SCOPE_NAME</div>
                        <div class="status-badge $STATUS_CLASS">$STATUS_TEXT</div>
                    </div>
                    <div class="scope-body">
                        <div class="info-grid">
                            <div class="info-item">
                                <div class="info-label">Backend Type</div>
                                <div class="info-value">$BACKEND_TYPE</div>
                            </div>
                            <div class="info-item">
                                <div class="info-label">Secret Count</div>
                                <div class="info-value">$SECRET_COUNT</div>
                            </div>
                            <div class="info-item">
                                <div class="info-label">Your Permission</div>
                                <div class="info-value"><span class="permission-badge $PERM_CLASS">$USER_PERMISSION</span></div>
                            </div>
                        </div>
EOF

                if [ "$ACCESS_STATUS" = "accessible" ] && [ "$SECRET_COUNT" -gt 0 ]; then
                    echo "                        <div class=\"secrets-list\">" >> "$HTML_FILE"
                    echo "                            <div class=\"info-label\">Available Secrets:</div>" >> "$HTML_FILE"
                    echo "$SECRETS_LIST" | tail -n +3 | grep -v '^$' | while read -r secret_line; do
                        if [ -n "$secret_line" ]; then
                            SECRET_KEY=$(echo "$secret_line" | awk '{print $1}')
                            echo "                            <div class=\"secret-item\">üîë $SECRET_KEY</div>" >> "$HTML_FILE"
                        fi
                    done
                    echo "                        </div>" >> "$HTML_FILE"
                fi
                
                echo "                    </div>" >> "$HTML_FILE"
                echo "                </div>" >> "$HTML_FILE"
            fi
        done
    fi

    # Add JavaScript and closing HTML
    cat >> "$HTML_FILE" << 'EOF'
            </div>
        </div>
    </div>

    <script>
        function filterScopes(filter) {
            const cards = document.querySelectorAll('.scope-card');
            const buttons = document.querySelectorAll('.filter-btn');
            
            // Update active button
            buttons.forEach(btn => btn.classList.remove('active'));
            event.target.classList.add('active');
            
            let visibleCount = 0;
            
            cards.forEach(card => {
                let show = false;
                
                switch(filter) {
                    case 'all':
                        show = true;
                        break;
                    case 'accessible':
                        show = card.dataset.status === 'accessible';
                        break;
                    case 'not-accessible':
                        show = card.dataset.status === 'not-accessible';
                        break;
                    case 'manage':
                        show = card.dataset.permission === 'MANAGE';
                        break;
                    case 'with-secrets':
                        show = parseInt(card.dataset.secretCount) > 0;
                        break;
                }
                
                if (show) {
                    card.classList.remove('hidden');
                    visibleCount++;
                } else {
                    card.classList.add('hidden');
                }
            });
            
            document.getElementById('visible-count').textContent = visibleCount;
        }
        
        // Initialize counts
        document.addEventListener('DOMContentLoaded', function() {
            const cards = document.querySelectorAll('.scope-card');
            const accessibleCards = document.querySelectorAll('[data-status="accessible"]');
            
            document.getElementById('total-count').textContent = cards.length;
            document.getElementById('accessible-count').textContent = accessibleCards.length;
            document.getElementById('visible-count').textContent = cards.length;
        });
    </script>
</body>
</html>
EOF

    print_success "Interactive HTML report generated: $HTML_FILE"
}

# Main execution
main() {
    echo "========================================"
    echo "  Databricks Secrets HTML Generator"
    echo "========================================"
    echo "Profile: $PROFILE"
    echo "Output: $HTML_FILE"
    echo "========================================"
    echo ""
    
    check_profile
    generate_html_report
    
    echo ""
    print_success "HTML report ready!"
    echo ""
    echo "üåê Open in browser: open $HTML_FILE"
    echo "üì± Or double-click the file to view"
    echo ""
    print_info "üí° To generate reports for other workspaces:"
    echo "   ./databricks-secrets-html-generator.sh fit"
    echo "   ./databricks-secrets-html-generator.sh iat"
    echo ""
    print_info "Each profile connects to a different Databricks workspace"
    print_info "Run this script for each profile to get complete coverage"
}

# Check if jq is available
if ! command -v jq &> /dev/null; then
    print_error "jq is required but not installed. Install with: brew install jq"
    exit 1
fi

main "$@"
